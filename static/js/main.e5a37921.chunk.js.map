{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","about","onClick","toggleMode","TextForm","useState","text","setText","style","color","value","onChange","event","console","log","target","rows","backgroundColor","newText","toUpperCase","class","toLowerCase","split","reverse","join","txtArea","document","getElementById","select","navigator","clipboard","writeText","filter","element","length","Enablemode","setStyle","btnText","setBtnText","defaultProps","App","setmode","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e5a37921.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/TextForm\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/About\">\r\n                {props.about}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        <div className=\"form-check form-switch mx-2 \">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"checkbox\"\r\n            id=\"flexSwitchCheckDefault\"\r\n            onClick={props.toggleMode}\r\n          />\r\n          <label className={`form-check-label\" htmlfor=\"flexSwitchCheckDefault ${props.mode === 'light' ? 'text-dark' : 'text-light'}`}>\r\n            Enable Dark Mode\r\n          </label>\r\n        </div>\r\n      </div>\r\n        </div>\r\n        {/* <button type=\"button\" className=\"btn btn-info mx-1\" onClick={props.blueMode}></button>\r\n        <button type=\"button\" className=\"btn btn-warning mx-1\" onClick={props.yellowMode}></button>\r\n        <button type=\"button\" className=\"btn btn-secondary mx-1\" onClick={props.grayMode}></button>\r\n        <button type=\"button\" className=\"btn btn-success mx-1\" onClick={props.greenMode}></button> */}\r\n\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  about: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Your title here\",\r\n  about: \"Your about here\",\r\n};\r\n","import React, { useState } from \"react\";\r\nexport default function TextForm(props) {\r\n\r\n  const [text, setText] = useState(\"\");\r\n  let upperBtn = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  };\r\n  let lowerBtn = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  };\r\n  let clearBtn = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n  };\r\n  let reverseBtn = () => {\r\n    let newText = text.split(\"\").reverse().join(\"\");\r\n    setText(newText);\r\n  };\r\n  let clearSpaceBtn = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n  };\r\n  let copyBtn = () => {\r\n    let txtArea = document.getElementById(\"textarea\");\r\n    txtArea.select();\r\n    navigator.clipboard.writeText(txtArea.value);\r\n  };\r\n  let changeMethod = (event) => {\r\n    console.log(\"On change\");\r\n    setText(event.target.value);\r\n  };\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}>\r\n        <h4 className=\"my-1\" style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}>\r\n          {props.title}\r\n        </h4>\r\n        <textarea\r\n          className=\"form-control my-2\"\r\n          value={text}\r\n          onChange={changeMethod}\r\n          id=\"textarea\"\r\n          rows=\"7\"\r\n          style={{ backgroundColor: props.mode === \"dark\" ? \"rgb(35 38 42)\" : \"white\", color: props.mode === \"dark\" ? \"white\" : \"#2a2d30\" }}\r\n        ></textarea>\r\n      </div>\r\n      <div className=\"container\">\r\n        <button className=\"btn mybtn mx-2 my-2\"  style={{ backgroundColor: props.mode === \"dark\" ? \"rgba(122,120,119,1)\" : \"rgb(50, 44, 99)\", color: \"white\"}} onClick={upperBtn}><i class=\"fa fa-arrow-up mx-2\"></i>\r\n          Click to Uppercase\r\n        </button>\r\n        <button className=\"btn mybtn mx-2 my-2\" style={{ backgroundColor: props.mode === \"dark\" ? \"rgba(122,120,119,1)\" : \"rgb(50, 44, 99)\", color: \"white\"}} onClick={lowerBtn}><i class=\"fa fa-arrow-down mx-2\"></i>\r\n          Click to Lowercase\r\n        </button>\r\n        <button className=\"btn mybtn  mx-2 my-2\" style={{ backgroundColor: props.mode === \"dark\" ? \"rgba(122,120,119,1)\" : \"rgb(50, 44, 99)\", color: \"white\"}} onClick={clearBtn}><i class=\"fa fa-times mx-2\"></i>\r\n          Clear\r\n        </button>\r\n        <button className=\"btn mybtn mx-2 my-2\" style={{ backgroundColor: props.mode === \"dark\" ? \"rgba(122,120,119,1)\" : \"rgb(50, 44, 99)\", color: \"white\"}} onClick={reverseBtn}><i class=\"fa fa-retweet mx-2\"></i>\r\n          Reverse\r\n        </button>\r\n        <button className=\"btn mybtn mx-2 my-2\" style={{ backgroundColor: props.mode === \"dark\" ? \"rgba(122,120,119,1)\" : \"rgb(50, 44, 99)\", color: \"white\"}} onClick={clearSpaceBtn}><i class=\"fa fa-eraser mx-2\"></i>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button className=\"btn mybtn mx-2 my-2\" style={{ backgroundColor: props.mode === \"dark\" ? \"rgba(122,120,119,1)\" : \"rgb(50, 44, 99)\", color: \"white\"}} onClick={copyBtn}><i class=\"fa fa-paste mx-2\"></i>\r\n          Copy Text to Clipboard\r\n        </button>\r\n\r\n        <div\r\n          className=\"my-1\"\r\n          style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n        >\r\n          <p>\r\n            {text.split(/\\s+/).filter((element) => { return element.length !== 0 }).length} words and {text.length} characters.\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"card text-white preview mb-2\" style={{ backgroundColor: props.mode === \"dark\" ? \"rgba(122,120,119,1)\" : \"rgb(50, 44, 99)\", color: \"white\"}}>\r\n          <div className=\"card-header\"> See Preview</div>\r\n          <div className=\"card-body\">\r\n            <p className=\"card-text\">{text}</p>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"my-1\"\r\n          style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n        >\r\n          <p>\r\n            {0.008 * text.split(\" \").length} <small> minutes to read</small>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Enablemode() {\r\n    let [style, setStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    });\r\n    let [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n    let toggleFun = () => {\r\n        if (style.color === 'black') {\r\n            setStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n            })\r\n            setBtnText(\"Enable Light Mode\");\r\n        }\r\n        else {\r\n            setStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\");\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"container my-4\" style={style}>\r\n            <h3 className=\"my-2\">Change Mode</h3>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={style}>\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={style}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={style}>\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={style}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={style}>\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={style}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button type=\"button\" onClick={toggleFun} className=\"btn btn-primary my-2\">{btnText}</button>\r\n        </div>\r\n    );\r\n}\r\n","import './App.css';\n// import Enablemode from './components/Enablemode';\nimport React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n      document.body.style.backgroundColor='#37393b';\n\n      // to change the title\n      document.title=\"Case Converter-Dark Mode\";    \n      \n      // To spark the title\n\n      // setInterval(() => {\n      //   document.title=\"Best Case Converter\";\n      // }, 1500);\n      // setInterval(() => {\n      //   document.title=\"Must Use It!\";\n      // }, 2000);\n    }\n    else {\n      setmode('light');\n      document.body.style.backgroundColor='#ebeaea';\n      // to change the title\n      document.title=\"Case Converter-Light Mode\";        \n    }\n  }\n  // const blueMode=()=>{\n  //     document.body.style.backgroundColor='#8cabbe';\n  // }\n  // const grayMode=()=>{\n  //     document.body.style.backgroundColor='#486f80';\n  // }\n  // const yellowMode=()=>{\n  //     document.body.style.backgroundColor='#fffa87';\n  // }\n  // const greenMode=()=>{\n  //     document.body.style.backgroundColor='rgb(187, 160, 178)';\n  // }\n  return (\n    <>\n    <Router>\n      <Navbar title=\"Case Converter\" about=\"About Us\" mode={mode} toggleMode={toggleMode} />\n      {/* for changing mode\n      blueMode={blueMode} grayMode={grayMode} yellowMode={yellowMode} greenMode={greenMode} */}\n      \n      <div className=\"container my-3\">\n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n        <TextForm title=\"Input Text Below:\" mode={mode} />\n          </Route>\n        </Switch>\n      </div>\n      {/* <Enablemode /> */}\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}